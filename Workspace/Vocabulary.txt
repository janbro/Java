Top-down development: a design in which you first define the general structure of the program, laying out high-level classes, and then refine the design of each class.
Bottom-up development: identify lower-level tools that you can compose to become a bigger program.
Abstract: classes closer to the top of the hierarchy are more abstract, the properties and methods of their objects are more general, and it can have constructors and methods: however, some of its methods may be declared abstract and left without code.
Specifications: a detailed description of what a piece of software should accomplish and how it should behave and interact with the user. 
Iterations: the programming language that controls structures such as while and for loops. 
Interface: has no constructors or instance variables and no code at all-just headings for methods. By default, all its methods are public and abstract. (It's not  necessary to use the words public or abstract.)
Encapsulation: the bundling together of data fields and operations into a single unit—a class.
Compile-time errors: if an index value is invalid, the interpreter throws an out of bounds exception, and reports a run-time error. 
Inheritance: allows the programmer to state that one class extends another class, inheriting its features. 
Object-oriented programming: a programming methodology based on designing the program as a world of interacting objects arranged in hierarchies of classes and using encapsulation and polymorphism. 
Procedural abstraction: a description of a procedure that is not tied to a specific hardware platform, particular data types, or other details.
Data Structure: a way of organizing data combined with methods of accessing and manipulating the data.
User Interface: the behavior of a program as it interacts with a user.
Override: when a subclass adds its own versions with exactly the same signature.
Arithmetic operators: are the data type of the result, even each intermediate result, is the same as the data type of the operands. 
Binary search: uses “divide and conquer” method for quickly finding a target value in a sorted array.
Acessors: these types of methods return values of instance variables.
Concrete: a class in which all the methods are defined.
Instance variables: describes the objects attributes-the current state of an object of constructors. 
Modifiers: a public method that sets a new value of an instance variable.
Class hierarchy: exist to allow reuse of code from higher classes in the lower classes without duplication and to promote a more logical design.
Instance:  Instance methods called for a particular object; then the objects name and dot are used as a prefix in a call.
Hashing: is a method for storing information in which the value of an item translates directly into its location in a harsh table.
Null: is a Java reserved word that stands for a reference with a value of zero.
Polymorphism: is a mechanism that assures that the correct method is call for an object disguised as a more generic type.  When the behavior of a method is determined at run-time.
Information Hiding: making all instance variables and helper methods that are used only inside the class private. The clients of a class can then use that class only through getter methods.
Driver Program: a program whose sole purpose is to test a given method or class. (You might use a driver program as you are writing a bottom-up program.) The purpose of the driver is to test the class fully before incorporating it as an object in a new class. When each independent class is working, classes that depend on others are implemented and tested and so on. Design flaws can be fixed at each stage of the development. *Stubs*
Composition: HAS-A relationship. E.g. X HAS-A Y means that Y is a data member (instance variable) of X
Independent Classes: Independent classes are fully implemented and tested before being incorporated into the overall project. Doesn't use other classes of the program in its code.
Interface: An interface is a class with method declarations that have no implementations. An interface cannot be inherited. It is implemented in other classes. An interface can add behavior to a class, but it does not provide hierarchy for the class. The methods defined in an interface are by default public and abstract. Therefore, the methods in an interface are only declarations followed by a semicolon. All of its methods are public and abstract.
Object Oriented Programming: A style of programming where a programmer takes a large problem and breaks it down into smaller pieces using objects.
